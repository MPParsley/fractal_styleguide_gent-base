//
// Globally defined general purpose mixins.
// These mixins can be used by multiple components.
//

//
// Border-box polyfill helper.
// @include border-box;
//
@mixin border-box() {
  box-sizing: border-box;
}

//
// @include border-content;
//
@mixin border-content() {
  box-sizing: border-content;
}

//
// Clearfix
//
// For modern browsers
// 1. The space content is one way to avoid an Opera bug when the
//    contenteditable attribute is included anywhere else in the document.
//    Otherwise it causes space to appear at the top and bottom of elements
//    that are clearfixed.
// 2. The use of `table` rather than `block` is only necessary if using
//    `:before` to contain the top-margins of child elements.
//
// Source: http://nicolasgallagher.com/micro-clearfix-hack/
//
@mixin clearfix() {
  &::before,
  &::after {
    display: table; // 2
    content: ' '; // 1
  }

  &::after {
    clear: both;
  }
}

//
// Themify mixin
// @param {Map} $themes [$themes] - Map of themes to use
//
@mixin themify($themes: $themes) {
  // Iterate over the themes
  @each $theme, $colors in $themes {
    // Create a selector (e.g. `.media.theme-unicorn, .theme-unicorn .media`)
    .section--#{$theme},
    .section--#{$theme} & {
      // Set the theme variables with `!global`
      $link-color: map-get($colors, 'link-color') !global;
      $link-visited-color: map-get($colors, 'link--visited-color') !global;
      $link-hover-color: map-get($colors, 'link-hover-color') !global;
      $section-bg-color: map-get($colors, 'section-bg-color') !global;

      // Output user content
      @content;
    }
  }
}

* {
  @include themify {
    background-color: $section-bg-color;
  }
}
